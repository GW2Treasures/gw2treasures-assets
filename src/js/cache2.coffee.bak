class Cache
    constructor: (name, storage) ->
        @name = name || 'globalCache'
        @storage = storage || window['storage']
        @_c = {}
        #console.log "new cache: #{@name}"
        @storage.get "cache.#{@name}", (x) =>
            @_c[y] = undefined for y in x if x
    _raw: (key, cb) ->
        if @_c[key] == undefined
            @storage.get (@_key key), (x) =>
                cb? @_c[key] = new CacheObject x
        else
            cb? @_c[key]
    _key: (key) ->
        "cache.#{@name}.#{key}"
    put: (key, value, seconds, cb) ->
        @_c[key] = new CacheObject key, value, Math.ceil new Date()/1000 + (seconds || 360)
        @storage.put "cache.#{@name}", Object.keys @_c
        @storage.put (@_key key), @_c[key]
        cb? value
    get: (key, cb) ->
        if @has key
            @_raw key, (raw) =>
                if raw.seconds < new Date()/1000
                    @remove key
                    cb? undefined
                else
                    cb? raw.value
        else
            cb? undefined
    remove: (key, cb) ->
        if @has key
            @storage.remove @_key key
            delete @_c[key]
            @storage.put "cache.#{@name}", Object.keys @_c
            cb? true
        else
            cb? false
    remember: (key, seconds, valuecb, cb) ->
        @get key, (value) =>
            if value == undefined
                value = valuecb()
                @put key, value, seconds
            cb? value
    has: (key) ->
        key of @_c
    clear: ->
        #console.log "clear cache: #{@name}"
        for key in Object.keys @_c
            @remove key
    clean: ->
        #console.log "clean cache: #{@name}"
        for key in Object.keys @_c
            @get key

class CacheObject
    constructor: (o, value, seconds) ->
        return null if o == null 
        if o && !value && !seconds
            @value = o.value
            @seconds = o.seconds
            @key = o.key
        else
            @key = o
            @value = value
            @seconds = seconds

Cache.prototype['put'] = Cache.prototype.put;
Cache.prototype['get'] = Cache.prototype.get;
Cache.prototype['remove'] = Cache.prototype.remove;
Cache.prototype['remember'] = Cache.prototype.remember;
Cache.prototype['has'] = Cache.prototype.has;
Cache.prototype['clear'] = Cache.prototype.clear;
Cache.prototype['clean'] = Cache.prototype.clean;

if module?.exports
    module.exports = Cache
else
    window['gw2treasures'] ?= {}
    window['gw2treasures']['definitions'] ?= {}
    window['gw2treasures']['definitions']['Cache'] = Cache
    window['cache'] = new Cache()